<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>parControl</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>stop_timer = 0;

horizontal_lock = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    
    if (stop_timer != 0) {
        stop_timer--;
        exit;
    }
    
    var _id;
    _id = objPlayer;
    
    if (instance_exists(objWinFlash)) {
        horizontal_lock = true;
    }
    
    if (!instance_exists(_id))
        exit;
    
    if (_id.action == _id.action_die)
        exit;
    
    var _x, _y; // Position vars.
    _x = _id.x;
    _y = _id.y;
    
    var _left, _right, _top, _bottom; // Border variables.
    _left   = x - floor(_id.x_speed*6);
    _right  = x - floor(_id.x_speed*6);
    _top    = y - 16;
    _bottom = y + 16;
    
    // Horizontal Borders
    // See if the player has passed either border. 
    // If so, then find the difference between the player and the respective border and move the camera by that amount.
    
    
    if (!horizontal_lock) {
        if (_x &lt; _left) // Left border.
            x -= min(_left - _x, 16);
        else
        if (_x &gt; _right) // Right border. 
            x += min(_x - _right, 16);
    }
        
    // Vertical Borders
    if (_id.ground) 
    {
        if (abs(_id.y - _id.yprevious) &lt;= 4) {
            y += min(max(_y - y, -4), 4);
        } else
            y += min(max(_y - y, -16), 16);
        
    }else 
    {
        if (_y &lt; _top)
            y -= min(_top - _y, 16);
        else
        if (_y &gt; _bottom)
            y += min(_y - _bottom, 16);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
